const http = require("http");
const url = require("url");

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logger = (req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
  next();
};

// Middleware –¥–ª—è CORS
const cors = (req, res, next) => {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");
  next();
};

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
const parseJson = (req, res, next) => {
  if (req.method === "POST" || req.method === "PUT") {
    let body = "";
    req.on("data", (chunk) => (body += chunk));
    req.on("end", () => {
      try {
        req.body = JSON.parse(body);
        next();
      } catch (e) {
        res.writeHead(400, { "Content-Type": "application/json" });
        res.end(JSON.stringify({ error: "Invalid JSON" }));
      }
    });
  } else {
    next();
  }
};

// –†–æ—É—Ç–µ—Ä
const router = {
  GET: {
    "/": (req, res) => {
      res.writeHead(200, { "Content-Type": "text/html; charset=utf-8" });
      res.end(`
        <h1>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π HTTP —Å–µ—Ä–≤–µ—Ä</h1>
        <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</p>
        <ul>
          <li><a href="/api/status">/api/status</a> - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞</li>
          <li><a href="/api/users">/api/users</a> - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</li>
          <li><a href="/api/calc?x=5&y=3">/api/calc?x=5&y=3</a> - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</li>
        </ul>
      `);
    },
    "/api/status": (req, res) => {
      res.writeHead(200, { "Content-Type": "application/json" });
      res.end(
        JSON.stringify({
          status: "running",
          uptime: process.uptime(),
          memory: process.memoryUsage(),
        })
      );
    },
    "/api/users": (req, res) => {
      res.writeHead(200, { "Content-Type": "application/json" });
      res.end(
        JSON.stringify([
          { id: 1, name: "–ê–Ω–Ω–∞", role: "admin" },
          { id: 2, name: "–ë–æ—Ä–∏—Å", role: "user" },
        ])
      );
    },
    "/api/calc": (req, res) => {
      const { x, y } = url.parse(req.url, true).query;
      const numX = parseFloat(x) || 0;
      const numY = parseFloat(y) || 0;

      res.writeHead(200, { "Content-Type": "application/json" });
      res.end(
        JSON.stringify({
          x: numX,
          y: numY,
          sum: numX + numY,
          diff: numX - numY,
          product: numX * numY,
          quotient: numY !== 0 ? numX / numY : "undefined",
        })
      );
    },
  },
  POST: {
    "/api/users": (req, res) => {
      const { name, email } = req.body || {};
      if (!name || !email) {
        res.writeHead(400, { "Content-Type": "application/json" });
        res.end(JSON.stringify({ error: "Name and email required" }));
        return;
      }

      const newUser = { id: Date.now(), name, email, createdAt: new Date() };
      res.writeHead(201, { "Content-Type": "application/json" });
      res.end(JSON.stringify({ message: "User created", user: newUser }));
    },
  },
};

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
const requestHandler = (req, res) => {
  const method = req.method;
  const path = url.parse(req.url).pathname;

  // –ü—Ä–∏–º–µ–Ω—è–µ–º middleware
  let middlewareIndex = 0;
  const middlewares = [logger, cors, parseJson];

  const next = () => {
    if (middlewareIndex < middlewares.length) {
      middlewares[middlewareIndex++](req, res, next);
    } else {
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–æ—É—Ç–∏–Ω–≥
      const handler = router[method]?.[path];
      if (handler) {
        handler(req, res);
      } else {
        res.writeHead(404, { "Content-Type": "application/json" });
        res.end(JSON.stringify({ error: "Not found", path }));
      }
    }
  };

  next();
};

// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const server = http.createServer(requestHandler);

// –ó–∞–ø—É—Å–∫–∞–µ–º
const PORT = 3001;
server.listen(PORT, () => {
  console.log(`üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì± –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:${PORT}`);
});
