const http = require("http");
const url = require("url");
const fs = require("fs");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  PORT: process.env.PORT || 3003,
  LOG_FILE: "server.log",
  MAX_REQUEST_SIZE: 1024 * 1024, // 1MB
};

// –ü—Ä–æ—Å—Ç–æ–π –ª–æ–≥–≥–µ—Ä
const logger = {
  log: (level, message, data = {}) => {
    const timestamp = new Date().toISOString();
    const logEntry = { timestamp, level, message, ...data };
    console.log(`[${timestamp}] ${level.toUpperCase()}: ${message}`, data);
    fs.appendFileSync(CONFIG.LOG_FILE, JSON.stringify(logEntry) + "\n");
  },
  info: (msg, data) => logger.log("info", msg, data),
  warn: (msg, data) => logger.log("warn", msg, data),
  error: (msg, data) => logger.log("error", msg, data),
};

// Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ CORS
const securityMiddleware = (req, res, next) => {
  if (req.headers["content-length"] > CONFIG.MAX_REQUEST_SIZE) {
    res.writeHead(413, { "Content-Type": "application/json" });
    res.end(JSON.stringify({ error: "Request too large" }));
    return;
  }
  res.setHeader("X-Content-Type-Options", "nosniff");
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader(
    "Access-Control-Allow-Methods",
    "GET, POST, PUT, DELETE, OPTIONS"
  );
  if (req.method === "OPTIONS") {
    res.writeHead(200);
    res.end();
    return;
  }
  next();
};

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
const jsonParserMiddleware = (req, res, next) => {
  if (req.method === "POST" || req.method === "PUT") {
    let body = "";
    req.on("data", (chunk) => {
      body += chunk;
      if (body.length > CONFIG.MAX_REQUEST_SIZE) {
        req.destroy(new Error("Request too large"));
        return;
      }
    });
    req.on("end", () => {
      try {
        req.body = body ? JSON.parse(body) : {};
        next();
      } catch (error) {
        logger.error("JSON parse error", { error: error.message });
        res.writeHead(400, { "Content-Type": "application/json" });
        res.end(JSON.stringify({ error: "Invalid JSON format" }));
      }
    });
  } else {
    next();
  }
};

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const loggingMiddleware = (req, res, next) => {
  const startTime = Date.now();
  logger.info("Request started", { method: req.method, url: req.url });

  const originalEnd = res.end;
  res.end = function (chunk, encoding) {
    const duration = Date.now() - startTime;
    logger.info("Request completed", {
      method: req.method,
      url: req.url,
      statusCode: res.statusCode,
      duration: `${duration}ms`,
    });
    originalEnd.call(this, chunk, encoding);
  };
  next();
};

// –†–æ—É—Ç–µ—Ä
const router = {
  GET: {
    "/": (req, res) => {
      res.writeHead(200, { "Content-Type": "text/html; charset=utf-8" });
      res.end(`
        <h1>üöÄ Production-Ready HTTP Server</h1>
        <p>–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏</p>
        <ul>
          <li><a href="/api/health">/api/health</a> - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è</li>
          <li><a href="/api/users">/api/users</a> - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</li>
          <li><a href="/api/error-test">/api/error-test</a> - –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫</li>
          <li><a href="/api/promise-error-test">/api/promise-error-test</a> - –¢–µ—Å—Ç –æ—à–∏–±–æ–∫ –≤ –ø—Ä–æ–º–∏—Å–∞—Ö</li>
        </ul>
      `);
    },
    "/api/health": (req, res) => {
      res.writeHead(200, { "Content-Type": "application/json" });
      res.end(
        JSON.stringify({
          status: "healthy",
          uptime: process.uptime(),
          memory: process.memoryUsage(),
          timestamp: new Date().toISOString(),
        })
      );
    },
    "/api/users": (req, res) => {
      const users = [
        { id: 1, name: "–ê–Ω–Ω–∞", email: "anna@example.com" },
        { id: 2, name: "–ë–æ—Ä–∏—Å", email: "boris@example.com" },
      ];
      res.writeHead(200, { "Content-Type": "application/json" });
      res.end(JSON.stringify({ users, count: users.length }));
    },
    "/api/error-test": (req, res) => {
      throw new Error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π");
    },
    "/api/promise-error-test": (req, res) => {
      // –¢–µ—Å—Ç unhandledRejection - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è
      new Promise((resolve, reject) => {
        setTimeout(() => {
          reject(new Error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–º–∏—Å–µ"));
        }, 100);
      });
      // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É - —ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç unhandledRejection
      res.writeHead(200, { "Content-Type": "application/json" });
      res.end(
        JSON.stringify({ message: "–ü—Ä–æ–º–∏—Å —Å –æ—à–∏–±–∫–æ–π —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏" })
      );
    },
  },
  POST: {
    "/api/users": (req, res) => {
      const { name, email } = req.body || {};
      if (!name || !email) {
        logger.warn("Validation failed", { body: req.body });
        res.writeHead(400, { "Content-Type": "application/json" });
        res.end(JSON.stringify({ error: "Name and email are required" }));
        return;
      }
      const newUser = {
        id: Date.now(),
        name,
        email,
        createdAt: new Date().toISOString(),
      };
      logger.info("User created", { userId: newUser.id, email });
      res.writeHead(201, { "Content-Type": "application/json" });
      res.end(
        JSON.stringify({ message: "User created successfully", user: newUser })
      );
    },
  },
};

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
const requestHandler = (req, res) => {
  const method = req.method;
  const path = url.parse(req.url).pathname;

  const middlewares = [
    securityMiddleware,
    loggingMiddleware,
    jsonParserMiddleware,
  ];
  let middlewareIndex = 0;

  const next = () => {
    if (middlewareIndex < middlewares.length) {
      middlewares[middlewareIndex++](req, res, next);
    } else {
      const handler = router[method]?.[path];
      if (handler) {
        try {
          handler(req, res);
        } catch (error) {
          logger.error("Handler error", {
            error: error.message,
            stack: error.stack,
          });
          res.writeHead(500, { "Content-Type": "application/json" });
          res.end(JSON.stringify({ error: "Internal server error" }));
        }
      } else {
        logger.warn("Route not found", { method, path });
        res.writeHead(404, { "Content-Type": "application/json" });
        res.end(JSON.stringify({ error: "Route not found", path }));
      }
    }
  };
  next();
};

// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const server = http.createServer(requestHandler);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
server.on("error", (err) => {
  logger.error("Server error", { error: err.message, code: err.code });
  if (err.code === "EADDRINUSE") {
    logger.error("Port already in use", { port: CONFIG.PORT });
    process.exit(1); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ –ø–æ—Ä—Ç –∑–∞–Ω—è—Ç
  }
});

// Graceful shutdown - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
const gracefulShutdown = (signal) => {
  logger.info(`Received ${signal}, starting graceful shutdown`);
  server.close(() => {
    logger.info("HTTP server closed");
    process.exit(0); // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
  });
  setTimeout(() => {
    logger.error("Forced shutdown after timeout");
    process.exit(1); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
  }, 5000);
};

// SIGINT - —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ)
process.on("SIGINT", () => gracefulShutdown("SIGINT"));

// SIGTERM - —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç systemd –∏–ª–∏ Docker)
process.on("SIGTERM", () => gracefulShutdown("SIGTERM"));

// uncaughtException - –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–¥–µ
// –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
process.on("uncaughtException", (err) => {
  logger.error("Uncaught exception", { error: err.message, stack: err.stack });
  setTimeout(() => process.exit(1), 1000); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
});

// unhandledRejection - –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–∏—Å–æ–≤
// –≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –∫–æ–¥–æ–º
process.on("unhandledRejection", (reason, promise) => {
  logger.error("Unhandled promise rejection", {
    reason: reason?.message || reason,
    promise: promise.toString(),
    stack: reason?.stack,
  });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
server.listen(CONFIG.PORT, () => {
  logger.info("Server started", { port: CONFIG.PORT, pid: process.pid });
  console.log(`üöÄ Production-Ready —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${CONFIG.PORT}`);
  console.log(`üì± –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:${CONFIG.PORT}`);
  console.log(`üîß Health check: http://localhost:${CONFIG.PORT}/api/health`);
  console.log(`üìù –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª–µ: ${CONFIG.LOG_FILE}`);
});
